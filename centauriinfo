#!/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2007-2023; BSD License"
CEN_TITLE="Collect and show some usefull information"

# Import the bash library, set name and version
PATH+=":${0%/*}" . _centauri_bash_lib -a -d "$0" '0.42:1' || exit 2

# Data
DAT_DISK_LABELS=                # used in get_label
DAT_HTML_ROOT="/var/www/html"   # used by do_indexHtml and do_archive
DAT_SEPARATOR=                  # flag for do_separator

# ------------------------------------------------------------------------------
# Create index.html
# ------------------------------------------------------------------------------
do_indexHtml() {
    # Page content
    __cont() {
        xml_element div    -a "id='navitop'"
        xml_element div -n -a "id='pagehdr'"
        xml_comment -n "Do not edit - autogenerated by $CEN_NAME"
        xml_table -n -h __thdr -b __tbdy -a "width='96%'"
        xml_element div -n -a "id='navibot'"
    }

    # Table header
    __thdr() {
        xml_element colgroup -b
            xml_element col -a "width='4%'"
            xml_element col -a "width='20%'"
            xml_element col
        xml_element colgroup -e
    }

    # Table row: <section> | [<item> [<link> <text> -|<file]...]
    __mrow() {
        if [ "$#" = 1 ] ; then
            xml_element tr -n "<td colspan='3'><h3>$1</h3></td>"
            return
        fi

        local ditm="$1" dfil dlis=() ; shift
        while [ $# != 0 ] ; do
            dfil="$3" ; [ "${dfil::1}" = "/" ] || dfil="$DAT_HTML_ROOT/$3"
            [ "$3" = "-" -o -e "$dfil" ] && dlis+=("[<a href='$1'>$2</a>]")
            shift ; shift ; shift
        done
        [ -z "$dlis" ] && return

        xml_element tr -b -i
            xml_element td -n -a "valign='top'" "" "$ditm" "${dlis[*]}"
        xml_element tr -e -u -n
    }

    # Table body
    __tbdy() {
         local domn ; embed -s domn centauriname --domain

        __mrow "Dokumentation"
        __mrow     "Debian" \
                       "dwww/"             "dwww Dokumentation" "dwww" \
                       "dwww/menu"         "Dokumentation Menu" "dwww/menu" \
                       "cgi-bin/dpkg"      "dpkg Information"   "/usr/lib/cgi-bin/dpkg"
        __mrow     "Linux" \
                       "dwww/man"          "Manual Seiten"      "dwww/man" \
                       "cgi-bin/info2www"  "GNU Info"           "/var/lib/info2www" \
                       "cgi-bin/dwww/usr/share/doc/?type=dir" \
                                           "doc Verzeichnis"    "dwww"
        __mrow     "Centauri Software" \
                       "centauritools/tools.html" "Centauri Tools"     "centauritools" \
                       "centauritools/index.html" "centauri-bash-lib"  "centauritools"

        __mrow     "Tuturials" \
                       "MiniDoc/index.html" \
                                           "Centauri MinDoc"    "MiniDoc" \
                       "doc/HOWTO/en-html/HOWTO-INDEX/index.html" \
                                           "Howto"              "/usr/share/doc/HOWTO" \
                       "doc/selfhtml/html/index.htm" \
                                           "Selfhtml"           "/usr/share/doc/selfhtml"

        __mrow     "Rezepte" \
                        "Rezepte/"         "Rezepte"            "Rezepte" \
                        "cgi-bin/namazu.cgi" \
                                           "In Rezepten suchen" "/var/lib/namazu/Rezepte"

        __mrow     "Sonstige" \
                       "gutenberg/index.html" \
                                           "Projekt Gutenberg"  "gutenberg" \
                       "weewx/index.html" \
                                           "Peters Wetterstation" "weewx" \
                       "bach-edel-text/index.html" \
                                           "Bach-Ausgabe Text"  "bach-edel-text" \
                        "TAZ/"             "TAZ als PDF"        "TAZ"

         __mrow "Verzeichnisse (Volumes)"
         __mrow     "Dateisystem" \
                       "/export/"          "Export"             "export" \
                       "/shared/"          "Shared"             "shared" \
                       "/archive/"         "Archive"            "archive"
       #  __mrow     "Linux im Haus" \
       #                "~jpf/www.j-pfennig.de/LinuxImHaus" \
       #                                    "Beispiele und Tools zur Systemkonfiguration" \
       #                                    "/home/jpf/Öffentlich/Html/www.j-pfennig.de/"
         local wusr webs=()
         for wusr in /home/* ; do
            webs+=("~${wusr##*/}"          "${wusr##*/}" "$wusr/Public/Html")
            webs+=("~${wusr##*/}"          "${wusr##*/}" "$wusr/Öffentlich/Html")
         done
         __mrow     "Benutzer WEBs"        "${webs[@]}"

         __mrow     "Web E-Mail" \
                        "rainloop"         "Rainloop"           "rainloop"

         __mrow "Verwaltung"

         __mrow     "Konfiguration" \
                       "//$HOSTNAME.$domn:631"   "cups"         "/usr/lib/cups" \
                       "//$HOSTNAME.$domn:3142/acng-report.html" \
                                                 "apt-cacher"   "/usr/bin/apt-cacher-ng" \
                       "//router.$domn"          "Router"       - \
                       "//printer0.$domn"        "Drucker"      -
         __mrow     "Backups" \
                       "archived.html#$HOSTNAME" "Archiv"       "archived.html" \
                       "autosave.html#$HOSTNAME" "Autosave"     "autosave.html"
         __mrow     "Squid WEB Cache" \
                       "calamaris/daily.html"    "täglich"      "calamaris/daily.html" \
                       "calamaris/weekly.html"   "wöchentlich"  "calamaris/weekly.html" \
                       "calamaris/monthly.html"  "monatlich"    "calamaris/monthly.html"

         local debi mani mann mans mdir="$DAT_HTML_ROOT/manifest"
         folder -m -f -- "$mdir"
         remove -- "$mdir"/*_*.html
         for debi in bullseye bookworm ; do
            mans=()
            for mani in "$CEN_ROOT/configs/$debi/${domn%%.*}"/[!@]*/*MANIFEST.html ; do
                [ -f "$mani" ] || continue
                mann="${mani%/*}"
                mann="${mann##*/}"
                copy -a -o -q -- "$mani" "$mdir/${debi}_$mann.html"
                mans+=("${mdir##*/}/${debi}_$mann.html" "$mann" "$mdir/${debi}_$mann.html")
            done
            [ -n "$mans" ] && __mrow "Manifeste ($debi)" "${mans[@]}"
         done
    }

    xml_document -5 -i 1 -s "navigation.js" -c "standard.css" -f __cont \
                 -a "Dr. J. Pfennig (c) 2017-2021" -t "Centauri (Lokales Web)" \
                 -o "$DAT_HTML_ROOT/index.html" \
                 "onload=\"navigation('February 2021', '' , '', '')\""
}

# ------------------------------------------------------------------------------
# Catalog HTML generation: <input> <output>
# ------------------------------------------------------------------------------
do_archiveHtml() {
    local larg opti
    if [ -z "$1" ] ; then
        larg="$1/*"
    elif [ -d "$1" ] ; then
        larg="$1/*"
    else
        larg="$1"
    fi

    # Page header
    __head() {
        xml_text -s -r 0 -n -l <<!EOF
        <style>
          H1 { font-weight: bold; color: blue; background-color:
               rgb(220,220,220); border: 1px solid rgb(128,128,128); padding: 2pt }
          H2 { color: blue; background-color:
               rgb(220,220,220); border: 1px solid rgb(128,128,128) }
          .txt { vertical-align:top; font-family:monospace }
          @media screen { .navi { position:absolute; margin-top: 2pt; margin-left: 18em } }
          @media print  { .navi { display: none; } }
        </style>

        <script language="javascript">
          var curshow; var curtext; var allshow=true;
          function toggle(indx) {
            if(!allshow) showall();
            var x = document.getElementById("x." + indx); if(x == null) return;
            if(curtext != null) curtext.innerText="Expand single node";
            if(curshow != x) {
                if(curshow != null && curshow.style.display != "none")
                    curshow.style.display = "none" ; curshow = x
            }
            if(x.style.display != "none")
            {  x.style.display = "none"; text="Expand single node" }
            else
            {  x.style.display = ""; text="Collaps single node" }
            curtext = document.getElementById("t." + indx);
            if(curtext != null) curtext.innerText=text;
          }
          function showall() {
            var icnt=0; var item; var mode; var tall
            if(allshow) {  mode=""; tall="Collaps all nodes"; }
            else        {  mode="none"; tall="Expand all nodes"; }
            allshow = !allshow;
            if( curtext != null) curtext.innerText="Expand single node";
            curtext=null; curshow=null;
            while((item = document.getElementById("x." + icnt)) != null)
            {   item.style.display = mode;
                item = document.getElementById("a." + icnt)
                if(item != null) item.innerText=tall
                icnt++;
            }
          }
          function onload() {
            var text=document.URL; var hash=text.lastIndexOf('#');
            text = (hash > 0) ? text.substr(hash+1) : null;
            var icnt=0;   var item;  var elts
            while((item = document.getElementById("h." + icnt)) != null)
            {  if(item.innerText == text) toggle(icnt);
                elts = document.getElementById("x." + icnt)
                if(elts != null)
                {  elts = elts.getElementsByTagName("tr");
                    var irun; var idat=0
                    for(irun=0; irun < elts.length; irun++)
                        if(elts[irun].getElementsByTagName("td").length > 1) idat++
                    item.innerHTML = item.textContent + "&nbsp;&nbsp;&nbsp;&nbsp; (" + idat + (idat==1 ? " File)" : " Files)");
                }
                icnt++;
            }
          }
        </script>
!EOF
}

    # Page content
    __cont() {
        xml_anchor -a "name='top'"
        xml_element h1 -n "<center>Archive Report (generated $(date +'%F %R'))</center>"
        local chos   cdat   cata
        local nhos=0 ndat=0 nata=0
        local host date data floc base file size kcur hlnk tidx=0

        while read kind host date data floc base file size ; do
            if [ "${kind::1}" = "0" ] ; then
                if [ -z "$host" ] ; then
                    xml_element p -n "$hlnk"
                else
                    hlnk+="&nbsp;&nbsp;&nbsp;<a href="#$host">$host Backups</a>"
                fi
                continue
            fi
            [ -z "$size" ] && continue
            [ -n "${size//[0-9]/}" ] && continue
            kind="${kind:1}"
            # xml_comment -n "$kind $host $date $data $floc $base $file $size"

            if [ "$kcur" != "$kind" ] ; then
                [ -n "$kcur" ] && do_host
                xml_element h2 -n "<a name='$kind'></a>&nbsp;$kind Backups<a href='#top' style='font-size: small'> [top]</a>"
                kcur="$kind" ; nhos=0 ; chos=
            fi
            if [ "$chos" != "$host" ] ; then
                do_host $nhos $host
                ndat=0 ; nata=0 ; chos="$host" ; cdat="$date"
                nhos=$((nhos + 1))
            fi
            if [ "$cdat" != "$date" ] ; then
                xml_element tr -n "<td colspan=4><hr></td>"
                cdat="$date" ; ndat=0 ; nata=0
            fi
            [ "$cata" = "$data" ] || nata=0
            cata="$data"
            do_data $nhos $host $ndat $date $nata $data "$floc:$base/$file" $(((size + 1023)/1024))
            ndat=$((ndat + 1)) ; nata=$((nata + 1))
        done <<!EOF
    $(do_list 0 $larg | sort -k 1,1 -k 2,2 -k 3,3r -k 4)
!EOF
        do_host $nhos
        xml_text -n -l "<hr/>" "<p>$hlnk</p>"
    }

    if [ "$CEN_VERB" -gt "1" ] ; then
        opti="-i 1"
        message -a "Generating verbose HTML"
    fi
    embed -m "_centauri_bash_xml"
    xml_document -5 $opti -h __head -f __cont \
                 -a "Dr. J. Pfennig (c) 2017" -t "Archive Report" \
                 "onload='onload()'"
}

# Args: $1 zero-based counter
#       $2 host-name  -or-  empty to finish
#       $3 data kind
do_host() {
    [ "$1" = "0" ] || xml_text -n -l "<tr><td colspan=4><hr></td></tr>" "</table>"
    [ -n "$2"  ] || return

    if [ -z "$CEN_OPT_NOJS" ] ; then
        xml_text -n -l \
            "<div><span class='navi'>" \
            "[<a id='t.$tidx' href=\"javascript:toggle('$tidx')\">Expand single node</a>] " \
            "[<a id='a.$tidx' href=\"javascript:showall()\">Expand all nodes</a>]</span>" \
            "<h3 id='h.$tidx'>$2</h3></div>" \
            "<table id='x.$tidx' width='98%' style='display: none'>"
    else
        xml_text -n -l "<h3>$2</h3>" "<table width='98%'>"
    fi
    xml_element tr -n "<td colspan=4><hr/></td>"
    tidx=$((tidx + 1))
}

do_data() {
    if [ "$CEN_VERB" -gt "1" ] ; then
        xml_element tr -i -b
        if [ "$3" = 0 ] ; then
            xml_element td    -n -a "width='12%'"   "$4"
        else
            xml_element td    -n
        fi
        if [ "$5" = 0 ] ; then
            xml_element td    -n -a "width='12%'"   "$6"
            xml_element td    -n                    "$7"
            xml_element td    -n -a "align='right'" "$8"
        else
            xml_element td    -n
            xml_element td    -n                    "$7"
            xml_element td    -n -a "align='right'" "$8"
        fi
        xml_element tr -u -e -n
    # fast path ...
    else
       local col1="<td></td>"
       [ "$3" = 0 ] && col1="<td width='12%'>$4</td>"
       if [ "$5" = 0 ] ; then
           xml_element tr -n "$col1<td width='12%'>$6</td><td>$7</td><td align='right'>$8</td>"
       else
           xml_element tr -n "$col1<td></td><td>$7</td><td align='right'>$8</td>"
       fi
    fi
}

# ------------------------------------------------------------------------------
# Parse file list           Args: $1 filter for location (disk, data ...)
#                                 $n list files
# ------------------------------------------------------------------------------
do_list() {
    # group helper: <prio> <key> <host> <date> <data> <floc> <base> <file> <size>
    local bytk=":"
    __bytype() {
        if [ -z "$1" ] ; then
            echo "0z"
        else
            echo "$1$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
            local key="${bytk/:$2:/}"
            [ "$key" = "$bytk" ] || return
            bytk="$bytk$2:"
            echo "0a$1" "$2"
        fi
    }

    local item filter="$1" nitm=0 ; shift
    for item in $* ; do
        [ -d "$item" ] && continue
        trace -i "catalogue processing: $item"
        local base name host data date floc base file size
        while read floc base file size; do
            name="${file%%.*}" ; host="${name%%_*}"
            [ -n "$name" ] || continue
            file="${file##*/}" ; data="${name#*_}"
            date="${data#*_}" ; data="${data%%_*}"
            nitm=$((nitm + 1))
            case "$base" in
### TODO Disk hack
            /mnt/sdc1/*)
                __bytype 3 "Disk"      "$host" "$date" "$data" "$floc" "${base:9}" "$file" "$size" ;;

            */data)
                __bytype 1 "Logical"   "$host" "$date" "$data" "$floc" "$base" "$file" "$size" ;;
            */disk|*/phys|*/vbox)
                __bytype 2 "Physical"  "$host" "$date" "$data" "$floc" "$base" "$file" "$size" ;;
            */daily)
                __bytype 5 "Daily"     "$host" "$date" "$data" "$floc" "$base" "$file" "$size" ;;
            */weekly)
                __bytype 6 "Weekly"    "$host" "$date" "$data" "$floc" "$base" "$file" "$size" ;;
            */monthly)
                __bytype 7 "Monthly"   "$host" "$date" "$data" "$floc" "$base" "$file" "$size" ;;

            /)
                __bytype 3 "DVD"       "$host" "$date" "$data" "$floc" "$base" "$file" "$size" ;;
            *)
                __bytype 9 "Other"     "$host" "$date" "$data" "$floc" "$base" "$file" "$size" ;;
            esac
        done < $item
    done
    __bytype
    trace -i "backup files found  : $nitm"
}

# ------------------------------------------------------------------------------
# output a separator line: [-n]
# ------------------------------------------------------------------------------
do_separator() {
    if [ -z "$DAT_SEPARATOR" ] ; then
        embed -m "_centauri_bash_con"
        [ -n "$CEN_COLS" ] || CEN_COLS=120
    fi

    if [ "$1" = '-n' ] ; then
        [ -n "$DAT_SEPARATOR" ] && output -l
        DAT_SEPARATOR=0 ; return
    fi

    if [ -z "$DAT_SEPARATOR" ] ; then
        DAT_SEPARATOR=1 ; return
    fi

    if [ "$DAT_SEPARATOR" = 0 ] ; then
        output -l
        DAT_SEPARATOR=1 ; return
    fi

    output -l -d one -x "$CEN_COLS" .
}

# ------------------------------------------------------------------------------
# create backup lists: [-|<domain>]
# ------------------------------------------------------------------------------
actionArchive() {
    local auto="autosave.html" arch="$CEN_ROOT/archived/@autosave"
    if [ -z "$1" ] ; then
        embed -r -s arch centauriname --domain
        arch="$CEN_ROOT/archived/${arch%.*}"
        auto="archived.html"
    elif [ "$1" != "-" ] ; then
        arch="$CEN_ROOT/archived/$1"
        auto="archived.html"
    fi

    if [ -d "$DAT_HTML_ROOT" ] ; then
        message -a "Creating $auto ..."
    else
        warning -a "Not creating $auto (no '$DAT_HTML_ROOT')"
        return
    fi

    if [ -d "$arch" ] ; then
        arch="$arch/*"
    elif [ ! -f "$arch" ] ; then
        trace -i "No backups: $arch" ; return
    fi
    #embed listBackup -I "$arch" -O "$DAT_HTML_ROOT/$auto" html
    dryrun "do_archiveHtml '$arch' >'$DAT_HTML_ROOT/$auto'" && return
    do_archiveHtml "$arch" >"$DAT_HTML_ROOT/$auto"
}

# ------------------------------------------------------------------------------
# Action cron - do housekeeping
# ------------------------------------------------------------------------------
actionCron() {
    # update motd
    message -a "Updating status information ..."
    if dryrun actionMotd ; then
        :
    elif [ -e '/etc/motd.static' ] ; then
        symlink -n '/etc/motd.static' '/etc/motd'
    else
        remove '/etc/motd'
        actionMotd > '/etc/motd'
    fi

    # create the manifest
    actionManifest >/dev/null 2>&1

    # update the list of archives
    embed centauridata list

    # make html stuff
    if [ -d "$DAT_HTML_ROOT" ] ; then
        actionArchive
        actionArchive -
        actionIndex
    else
        trace -a "No '$DAT_HTML_ROOT folder' - not generating HTML files"
    fi
}

# ------------------------------------------------------------------------------
# Report disks and partitions
# ------------------------------------------------------------------------------
actionDisk() {
    # help to get disk label via udev
    get_label() {
        local -n vref="$1" ; vref=
        [ -z "$DAT_DISK_LABELS" ] && DAT_DISK_LABELS=(/dev/disk/by-label/*)
        local item
        for item in "${DAT_DISK_LABELS[@]}" ; do
            [ "$item" -ef "$2" ] || continue
            vref="${item##*/}" ; return
        done
    }

    local head ddev vol arg="${1::3}"
    if [ "${1::5}" = '/dev/' ] ; then
        ddev="$1"
    elif [ "$arg" = 'all' ] ; then
        for vol in /mnt/* '/home' '/export' ; do
            [ -e "$vol/mount-the-volume" ] && :
        done
    fi

    do_separator -n

    head="Device.... Label.......... Type... Total. Used. Free....... Mountpoint"
    output -l "${head//./ }"
    local ind="${#head}" ; ((ind -= 10))
    [ "$CEN_COLS" -lt 70 ] && ind="-"
    if [ "$CEN_COLS" -ge 60 ] ; then
        head+=".........................." ; head="${head::CEN_COLS}"
    fi
    output -d '-' -l -- "$head"

    # get block device information
    local itms indx=0 flds info=() iinf=0
    system -a itms -f -p -- lsblk -o NAME,LABEL,FSTYPE,SIZE,MOUNTPOINT,TYPE -n -b -P -x NAME $ddev

    # get used disk space for mounted file systems
    while [ "$indx" -lt "${#itms[*]}" ] ; do
        eval "${itms[indx]}"
        indx="$((indx + 1))"
        mpt=$(echo -e "$MOUNTPOINT")
        [ "${mpt::1}" = "/" ] || continue
        if [ -r "$mpt" ] ; then
            info+=("$mpt")
        else
            warning -a "Cannot read:" "$mpt"
        fi
    done
    if [ "${#info[*]}" -gt 0 ] ; then
        system -a info -f -p -- df -Bg -T "${info[@]}"
        iinf=0
    fi

    local dev lbl typ all fre use per nam mpt used
    indx=0
    while [ "$indx" -lt "${#itms[*]}" ] ; do
        eval "${itms[indx]}"
        flds=("$NAME" "$LABEL" "$FSTYPE" "$SIZE" "$MOUNTPOINT" "$TYPE")
        [ "${MOUNTPOINT::1}" = "/" ] && iinf=$((iinf + 1))
        ((indx += 1))

        fre="-" ; use="-" ; per="-"
        if [ "${flds[5]}" = "part" -o -n "${flds[2]}" ] ; then # partition
            [ "$arg" = "dri" ] && continue
            all="${flds[3]}"
            if [ -z "${flds[1]}" -a "$EUID" != 0 ] ; then
                get_label lbl "/dev/${flds[0]}"
                flds[1]=$(echo -e "$lbl")
            fi
        elif [ "${flds[5]}" = "rom" ] ; then
            [ "$arg" = "all" ] || continue
            all="${flds[3]}" #; flds[1]=
            fre= ; use= ; per=
        else                                            # drive
            [ "$arg" = "dri" -o "$arg" = "all" ] || continue
            all="${flds[3]}" ; flds[1]=
            fre= ; use= ; per=
        fi
        if [ -z "$arg" ] ; then
            [ -z "${flds[1]}" -a -z "${flds[2]}" ] && continue
            local labl="${flds[1]##*_}"
            [ "${labl::3}" = "boo" -a "${flds[2]:-vfat}" = "vfat" \
                                   -a -z "${flds[4]}" ] && continue
        fi

        [ -n "$all" ] && all="$(((all + (2 << 28)) >> 30))G"
        dev="${flds[0]}"
        lbl="${flds[1]}"
        typ="${flds[2]}"
        mpt="${flds[4]}"
        if [ "${mpt::1}" = "/" ] ; then
            nam="${mpt##*/}"
            if [ "$mpt" -ef "/mnt/${nam##*_}" ] ; then
               mpt="/mnt/${nam##*_}"
            elif [ "$mpt" -ef "/mnt/vol0/Volumes/${nam^}" ] ; then
                mpt="/mnt/vol0"
            fi
            splitjoin -s used -d " \t" "${info[iinf]}"
            fre="${used[3]}" ; use="${used[4]}" ; per="${used[5]}"
            [ -z "$typ" ] && typ="${used[1]}"
        fi

        [ "${#dev}" -gt  9 ] && dev+=$'\n         '
        [ "${#lbl}" -gt 15 ] && lbl+=$'\n                         '
        [ "${#typ}" -gt  7 ] && typ+=$'\n                                 '
        local deco= ; [ -z "$use" ] && deco="-d 1"
        output $deco -m -b "$ind" -p "%-10s %-15s %-7s %6s%6s%6s %4s  %s" \
               "$dev" "$lbl" "$typ" "$all" "$fre" "$use" "$per" "$mpt"
    done
    output -l -d '-' -- "$head"
}

# ------------------------------------------------------------------------------
# Report environment variables: <expr>
# ------------------------------------------------------------------------------
actionEnvir() {
    local vars name cont entr glob="$1" head
    system -e -p -a vars -- env || return

    do_separator -n
    head=$((CEN_COLS - 21))
    [ "$head" -lt 60 ] && head=60
    printf -v head "%-20s|%-${head}s" "Name" "Value"
    head="${head// /_}"
    head="${head/|/ }"
    output -l -- "${head//_/ }"
    output -l -d one -- "$head"

    txtsort -a vars -i vars
    [ -n "$glob" ] && [ "$glob" = "${glob/\*/}" ] && glob="*$glob*"
    for entr in "${vars[@]}" ; do
        name="${entr%%=*}" ; cont="${entr#*=}"
        [ "$name" = '_' ] && continue
        [ -n "$glob" ] && ! [[ "$name" == $glob ]] && continue
        if [ "${#name}" -gt 20 ] ; then
            printf "%s\n" "$name" ; name=
        fi
        output -m -b 21 -p "%-20s %s" "$name" "$cont"
    done
    output -l -d '-' -- "$head"
}

# ------------------------------------------------------------------------------
# Action index - generate HTML
# ------------------------------------------------------------------------------
actionIndex() {
    if [ -d "$DAT_HTML_ROOT" ] ; then
        message -a "Building index.html ..."
        dryrun do_indexHtml && return
        do_indexHtml
    else
        warning -a "Not building index.html (no '$DAT_HTML_ROOT')"
    fi
}

# ------------------------------------------------------------------------------
# show used/free disk space in "message of the day" format
# ------------------------------------------------------------------------------
actionMotd() {
    dryrun actionMotd && return
    local vol head vbar
    [ "$1" != "disk" ] && for vol in /.autolocal/* ; do
        file "$vol/a_file_that_does_not_exist" >/dev/null 2>&1
    done

    case "${LANG,,}" in
    *.utf8|*utf-8)  vbar='║' ;;
    *)              vbar='|'
    esac

    if [ "$1" != "disk" ] ; then
        if [ "$vbar" != '|' ] ; then
            echo -e "\n                          ◄ Mounts on $HOSTNAME ►"
            echo "    ╔════════════════════════════════════════════════════════════════════════╗"
            echo "    ║ Device          Type      Total   Used       Mountpoint                ║"
            echo "    ║────────────────────────────────────────────────────────────────────────║"
            head="    ╚════════════════════════════════════════════════════════════════════════╝"
        else
            echo -e "\n                          ~ Mounts on $HOSTNAME ~"
            echo "    o========================================================================o"
            echo "    | Device          Type      Total   Used       Mountpoint                |"
            echo "    |------------------------------------------------------------------------|"
            head="    o========================================================================o"
        fi
    else
        embed -m '_centauri_bash_con'
        [ -n "$CEN_COLS" ] || CEN_COLS=80
        head="Device......... Type..... Total.. Used.. Free...... Mountpoint"
        output -l "${head//./ }"
        if [ "$CEN_COLS" -ge 60 ] ; then
            head+=".........................." ; head="${head::CEN_COLS}"
        fi
        output -d '-' -l -- "$head"
    fi

    local typ all fre use per mpt nam dmy
    local nl=$'\n'
    while read vol typ all fre use per mpt ; do
        if [ "${vol::13}" = "/dev/disk/by-" ] ; then
            for dmy in /dev/sd* ; do
                [ "$vol" -ef "$dmy" ] || continue
                vol="$dmy" ; break
            done
        fi
        nam="${mpt##*/}"
        [ "$mpt" -ef "/mnt/${nam##*_}" ] && mpt="/mnt/${nam##*_}"
        if [ "$1" != "disk" ] ; then
             if [ "${#vol}" -gt 15 ] ; then
                 printf "    ║ %-71s║\n" "$vol"
                 vol=
             fi
             printf "    $vbar %-15s %-8s %6s %6s %4s  %-26.26s$vbar\n" \
                    "$vol" "$typ" "$all" "$fre" "$per" "$mpt"
        else
            [ "${#vol}" -gt 15 ] && vol="$vol$nl               "
            printf "%-15s %-8s %6s %6s %6s %4s  %s\n" "$vol" "$typ" "$all" "$fre" "$use" "$per" "$mpt"
        fi
    done <<!EOF
$(df -Bg -l -t auto -t ext3 -t ext4 -t reiserfs -t vfat -t ntfs -t btrfs -t f2fs -t fuseblk -T | grep "^/" | sort)
!EOF
    if [ "$1" != "disk" ] ; then
        echo "$head"
    else
        output -d '-' -l -- "$head"
    fi
}

# ------------------------------------------------------------------------------
# create manifest file
# ------------------------------------------------------------------------------
actionManifest() {
    message -a "Creating manifest ..."
    embed -i -v "$CEN_TOOLS/utilities/manifest" --force "/etc/MANIFEST.html"
}

# ------------------------------------------------------------------------------
# network information
# ------------------------------------------------------------------------------
actionNetwork() {
    local scmd icmd list
    case "$1" in
        a*4)    scmd='addr4'  ; icmd='ip -4 addr show' ;;
        a*6)    scmd='addr6'  ; icmd='ip -6 addr show' ;;
        r*4)    scmd='route4' ; icmd='ip -4 route show' ;;
        r*6)    scmd='route6' ; icmd='ip -6 route show' ;;
        *)      invoke -e "Invalid invokation:" "$*"
    esac ; shift

    [ -n "$CEN_PATHS" ] && PATH="/system/bin:$PATH"         # for termux/android
    system -e -p -a list -- $icmd "$@" || return            # run 'ip' command
    [ "${scmd::1}" = 'a' ] && do_addr "${list[@]}" || do_route "${list[@]}"
}

do_addr() {
    do_separator
    local line mesg
    for line in "$@" ; do
        if [ "$CEN_VERB" -gt 1 ] ; then
            if [ "${line::1}" = ' ' ] ; then
                printf '%s\n' "$line"
            else
                output -d bold -l -- "$line"
            fi
            continue
        fi

        trimjoin -c -w -s line
        case "$line" in
            *:\ *:\ *)
                mesg="${line#*: }"
                output -d bold -m -b 8:2 -p '%-8s%s' "${mesg%%:*}" "${mesg#* }" ;;
            inet*)
                mesg="${line#* }"
                output -m -b 50:2 -p '%-4s%-41s %s' '' "${mesg%% *}" "${mesg#* }" ;;
            *)  ;;
        esac
    done
}

do_route() {
    do_separator
    local line mesg wlis ctab curr='xxkernel'
    for line in "$@" ; do
        if [ "$CEN_VERB" -gt 1 ] ; then
            printf '%s\n' "$line" ; continue
        fi

        trimjoin -c -w -s line
        mesg="${line%% *}"
        case "$mesg" in
            local|multicast|anycast|broadcast|unreachable|nat|prohibit|blackhole|throw)
                    if [ "$mesg" != "$curr" ] ; then
                        output -d bold -l -- "$mesg" ; curr="$mesg"
                    fi
                    line="${line#* }"
                    line="${line/ table $mesg / }" ;;
            *)
                    mesg='kernel'
                    if [ "$mesg" != "$curr" ] ; then
                        output -d bold -l -- "$mesg" ; curr="$mesg"
                    fi
                    ;;
        esac

        mesg="${line%% *}"
        case "$mesg" in
            default)
                splitjoin -s wlis -d ' ' -- "$line"
                if [ "${wlis[1]}" = 'via' ] ; then
                    output -m -b 46:2 -p '    %-41s %s' "${wlis[*]::3}" "${wlis[*]:3}"
                else
                    output -m -b 46:2 -p '    %-41s %s' "${wlis[*]::1}" "${wlis[*]:1}"
                fi ;;
            nexthop)
                splitjoin -s wlis -d ' ' -- "$line"
                output -m -b 46:2 -p '        %-37s %s' "${wlis[*]::3}" "${wlis[*]:3}" ;;
            *.*.*.*)
                output -m -b 46:2 -p '    %-41s %s' "${line%% *}" "${line#* }" ;;
            *:*:*)
                output -m -b 46:2 -p '    %-41s %s' "${line%% *}" "${line#* }" ;;
            *::/[0-9]*)
                output -m -b 46:2 -p '    %-41s %s' "${line%% *}" "${line#* }" ;;
            *)
                printf '        %s\n' "$line"
        esac
    done
}

# ------------------------------------------------------------------------------
# show mounted disks: [all]
# ------------------------------------------------------------------------------
actionMount() {
    local fall ; [ "$1" = "all" ] && fall='-t tmpfs -t efivarfs'
    local fdri ; [ "${1::3}" = "dri" ] && fdri=1
    embed -m "_centauri_bash_con"
    embed -m "_centauri_bash_ext"
    embed -m "_centauri_bash_mnt"

    do_separator -n

    local serv list item flds cdev clbl
    netquery -s serv 'MASTER'
    findmount -a $fall -t -
    txtsort -a list -i CEN_MOUNT_ARR

    local labl dhdr dind dmar
    if [ "$CEN_VERB" -gt 1 ] ; then
        labl="Device........ Mountpoint................ Type.... Label.......... Options"
        output -l "${labl//./ }" ; output -d '-' -v dhdr "$labl"
        dind=${#labl}
        dmar=$((CEN_COLS - dind)) ; [ "$dmar" -lt 1 ] && dmar=0
        [ "$CEN_COLS" -lt 80 ] && dind='-' || ((dind -= 7))
    else
        labl="Device.......... Mountpoint.................. Type........ Label.........."
        output -l "${labl//./ }" ; output -d '-' -v dhdr "$labl"
        dind='-'
        dmar=0
    fi
    printf -v dmar "%${dmar}s" ""
    output -d '-' -l -- "$dhdr${dmar// /.}"

    local ivol impt ityp iopt
    for item in "${list[@]}" ; do
        CEN_AUTOIND=
        splitjoin -s flds -- "$item"
        ivol="$flds" ; impt="${flds[1]}" ; ityp="${flds[2]}" ; iopt="${flds[3]}"
        ivol="${ivol//\\/\/}"
        [ -n "$fdri" -a "${ivol::5}" != "/dev/" ] && continue

        prettypath -s impt -- "$impt"
        item="${impt%/*}"
        [ "$item" = "/data/$serv" ] && ivol="[${impt##*/}]"
        [ "$impt" = "/data/home" ] && ivol="[home]"

        if [ "$flds" = "$cdev" ] ; then
            ivol= ; ityp='...' ; clbl='...'
        else
            findmount -r label "$flds"
            clbl="$CEN_MOUNT_DIR" ; cdev="$flds"
        fi

        if [ "$CEN_VERB" -gt 1 ] ; then
            if [ "${#ivol}" -gt 14 ] ; then
                output -l "$ivol" ; ivol=
            fi
            if [ "${#impt}" -gt 26 ] ; then
                output -l -p "%-14s %s" "$ivol" "$impt" ; ivol= ; impt=
            fi
            if [ "${#clbl}" -gt 15 ] ; then
                output -l -p "%-14s %-26s %-8s %s" "$ivol" "$impt" "${ityp::8}" "$clbl"
                ivol= ; impt= ; ityp= ; clbl=
            fi
            output -l -b "$dind" -p "%-14s %-26s %-8s %-15s %s" \
                   "$ivol" "$impt" "${ityp::8}" "$clbl" "$iopt"
        else
            if [ "${#ivol}" -gt 16 ] ; then
                output -l "$ivol" ; ivol=
            fi
            if [ "${#impt}" -gt 28 ] ; then
                output -l -p "%-16s %s" "$ivol" "$impt" ; ivol= ; impt=
            fi
            output -l -b "$dind" -p "%-16s %-28s %-12s %s" \
                   "$ivol" "$impt" "${ityp::12}" "$clbl"
        fi
    done

    output -d '-' -l -- "$dhdr${dmar// /.}"
}

# ------------------------------------------------------------------------------
# show syslog: [[-f|-b] [<expr>]]
#
#   syslog -b|-f            -> journalctl --no-host -b|-f
#   syslog -b|-f <expr>     -> journalctl --no-host -b|-f | grep <expr>
#   syslog -b|-f -g <expr>  -> journalctl --no-host -b|-f -g <expr>
#   syslog <opt>... <expr>  -> journalctl --no-host <opt>... | grep <expr>
# ------------------------------------------------------------------------------
actionSyslog() {
    local fgrp ffol opts=("--no-host")
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)     shift ; break ;;
        -f)     ffol=1 ; opts+=("$1") ;;
        -g)     fgrp=1 ;;
        -p|-u)  opts+=("$1" "$2") ; shift ;;
        *)      opts+=("$1") ;;
        esac
        shift
    done

    if [ "${CEN_OPT_PAGER::1}" = '/' ] ; then
        invoke -e "Only '--pager=no' is supported" ; return
    elif [ -n "$CEN_OPT_PAGER" ] ; then
        opts+=('--no-pager')
    fi

    if [ -n "$fgrp" ] ; then
        system -e -x 'journalctl' "${opts[@]}" -g "$@"
    elif [ $# = 0 ] ; then
        system -e -x 'journalctl' "${opts[@]}" "$@"
    else
        local pipe item args=(-E)
        for item in "$@" ; do
            args+=('-e' "$item")
        done
        if [ -n "$CEN_OPT_PAGER" -o -n "$ffol" ] ; then
            sysfind -c -f journalctl grep
            journalctl "${opts[@]}" | grep --color=auto "${args[@]}"
        else
            sysfind -c -f journalctl grep less
            journalctl "${opts[@]}" | grep --color=always "${args[@]}" | less -r -F -R -X
        fi
    fi
}

# ------------------------------------------------------------------------------
# show users
# ------------------------------------------------------------------------------
actionUsers() {
    embed centaurildap users
}

# ------------------------------------------------------------------------------
# Action parsing
# ------------------------------------------------------------------------------
actions() {
    case "$CEN_ACTION" in

    a*4|a*6|r*4|r*6)
        invoke    'network'    - 0 + "$@" ;;
    arc*)
        invoke -r 'archive'    - 0 1 ;;
    cro*)
        invoke -r 'cron'       - 0 ;;
    dis*)
        invoke    'disk'       - 0 1 ;;
    env*)
        invoke    'envir'      - 0 1 ;;
    ind*)
        invoke -r 'index'      - 0 ;;
    man*)
        invoke -r 'manifest'   - 0 ;;
    mot*)
        invoke    'motd'       - 0 1 ;;
    mou*)
        invoke    'mount'      - 0 1 ;;
    sys*)
        invoke -s 'syslog'     - 0 + ;;
    use*)
        invoke    'users'      - 0 ;;

    esac
}

# ------------------------------------------------------------------------------
# Print usage info
# ------------------------------------------------------------------------------
usage() {
    usageset \
        -a "cron                 "$"do some housekeeping (archive, index and manifest)" \
        -a '' \
        -a "••• HTML file creation •••" \
        -a '' \
        -a "archive [-|<domain>] "$"archived.html or autosave.html ('-' for autosave)" \
        -a "index                "$"build the index.html frontpage" \
        -a "manifest             "$"create a manifest file" \
        -a '' \
        -a "••• information display •••" \
        -a '' \
        -a "disks   [all|drives] "$"show disk usage (detailed)" \
        -a "envir   [<glob>]     "$"show environment variables (optional glob filter)" \
        -a "motd    [disk]       "$"show disk usage (in /etc/motd format)" \
        -a "mounts  [all|drives] "$"show mounted disk partions" \
        -a "syslog  [--- -b|-f] [<expr>]" \
        -a "                     "$"show journalctl output" \
        -a "users                "$"show real users (same as 'centaurildap users')" \
        -a '' \
        -a "••• network •••" \
        -a '' \
        -a "addr4|6  <iarg>...   "$"list IPv4/6 adresses using 'ip addr list ...'" \
        -a "route4|6 <iarg>...   "$"list IPv4/6 routes using 'ip route list ...'" \

}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end
